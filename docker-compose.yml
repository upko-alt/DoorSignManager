version: '3.8'

# Production Deployment:
# 1. Build images: docker-compose build
# 2. Start in background: docker-compose up -d
# 3. View logs: docker-compose logs -f app
# 4. Stop logs viewing: Ctrl+C (containers keep running)
# 5. Stop all services: docker-compose down
#
# Development Usage:
# - Start and view logs (blocks terminal): docker-compose up
# - Start in background (recommended): docker-compose up -d
# - View logs after starting: docker-compose logs -f
# - View logs for specific service: docker-compose logs -f app

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: epaper-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-epaper_dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-epaper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD in .env}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U epaper_user -d epaper_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - epaper-network

  # E-Paper Dashboard Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: epaper-app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-epaper_user}:${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD in .env}@db:5432/${POSTGRES_DB:-epaper_dashboard}
      SESSION_SECRET: ${SESSION_SECRET:?Please set SESSION_SECRET in .env}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}  # Set to 'false' for HTTP. Use 'true' with HTTPS/SSL
      ADMIN_USERNAME: ${ADMIN_USERNAME:?Please set ADMIN_USERNAME in .env}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:?Please set ADMIN_PASSWORD in .env}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      EPAPER_IMPORT_URL: ${EPAPER_IMPORT_URL:-}
      EPAPER_IMPORT_KEY: ${EPAPER_IMPORT_KEY:-}
      EPAPER_EXPORT_URL: ${EPAPER_EXPORT_URL:-}
      EPAPER_EXPORT_KEY: ${EPAPER_EXPORT_KEY:-}
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    networks:
      - epaper-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: sh -c "npx drizzle-kit push --force && node dist/docker-init.js && node dist/index.js"

  # Nginx Reverse Proxy with automatic SSL (Let's Encrypt)
  nginx:
    image: jonasal/nginx-certbot:latest
    container_name: epaper-nginx
    restart: unless-stopped
    depends_on:
      - app
    environment:
      CERTBOT_EMAIL: ${CERTBOT_EMAIL:?Please set CERTBOT_EMAIL in .env}
      DOMAINS: ${DOMAIN:?Please set DOMAIN in .env}
      # Use staging server for testing (remove for production)
      # STAGING: 1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx-docker.conf:/etc/nginx/user_conf.d/default.conf:ro
      - nginx_secrets:/etc/letsencrypt
      - nginx_cache:/var/cache/nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - epaper-network

networks:
  epaper-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_secrets:
    driver: local
